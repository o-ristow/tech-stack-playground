---
- name: Gather system information
  hosts: all
  become: true
  tasks:
    - name: Gather system facts
      ansible.builtin.setup:

    - name: Gather CPU information
      ansible.builtin.command: lscpu
      register: cpu_info
      changed_when: false

    - name: Check for VT support
      ansible.builtin.command: grep -E 'vmx|svm' /proc/cpuinfo
      register: vt_support
      failed_when: false

    - name: Gather memory information
      ansible.builtin.command: free -m
      register: memory_info

    - name: Gather disk space information
      ansible.builtin.command: df -h
      register: disk_info

#    - name: Show raw lscpu output
 #     debug:
  #      msg: "{{ cpu_info.stdout | regex_findall('^CPU\\(s\\):\\s+(\\d+)$', multiline=True) }}"

    - name: Extract CPU cores
      set_fact:
        cpu_cores: "{{ (cpu_info.stdout | regex_findall('^CPU\\(s\\):\\s+(\\d+)$', multiline=True) | first | int) if (cpu_info.stdout | regex_findall('^CPU\\(s\\):\\s+(\\d+)$', multiline=True)) else 0 }}"
#    - name: Show raw lscpu output
 #     debug:
  #      msg: "{{ cpu_cores }}"


    - name: Create JSON content
      set_fact:
        json_content: |
          {
            "cpu_cores": {{ cpu_cores }}, 
            "vt_support": {{ 'enabled' if vt_support.stdout else 'disabled' }},
            "memory": {
              "total_mb": {{ (memory_info.stdout_lines[1].split()[1]) | int }},
              "available_mb": {{ (memory_info.stdout_lines[1].split()[6]) | int }}
            },
            "disk": [
              {% for line in disk_info.stdout_lines[1:] %}
              {
                "filesystem": "{{ line.split()[0] }}",
                "size": "{{ line.split()[1] }}",
                "used": "{{ line.split()[2] }}",
                "available": "{{ line.split()[3] }}",
                "percent_used": "{{ line.split()[4] }}",
                "mounted_on": "{{ line.split()[5] }}"
              }{% if not loop.last %},{% endif %}
              {% endfor %}
            ]
          }

    - name: Write JSON output locally
      copy:
        content: "{{ json_content }}"
        dest: "{{ playbook_dir }}/system_info_{{ ansible_facts['hostname'] }}.json"
      delegate_to: localhost
      become: no

  vars:
    playbook_dir: "{{ playbook_dir | default(playbook_dir | realpath('.')) }}"